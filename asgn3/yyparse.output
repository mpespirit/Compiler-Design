Terminals unused in grammar

   TOK_NEG
   TOK_POS
   TOK_FUNCTION
   TOK_FIELD
   TOK_CHAR
   NUMBER
   TOK_PROTOTYPE
   TOK_RETURNVOID
   TOK_INDEX
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_DECLID
   TOK_NEWSTRING
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_PARAMLIST
   TOK_VARDECL


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    9          | TOK_STRUCT TOK_IDENT '{' fdecls '}'

   10 fdecls: fdecls fdecl ';'
   11       | fdecl

   12 fdecl: basetype TOK_IDENT
   13      | basetype TOK_ARRAY TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_INT
   16         | TOK_STRING
   17         | TOK_IDENT

   18 function: iddecl '(' ')' ';'
   19         | iddecl '(' ')' block
   20         | iddecl '(' paramlist ')' ';'
   21         | iddecl '(' paramlist ')' block

   22 paramlist: iddecl
   23          | paramlist ',' iddecl

   24 iddecl: basetype TOK_IDENT
   25       | basetype TOK_ARRAY TOK_IDENT

   26 block: '{' '}'
   27      | blocks '}'

   28 blocks: '{' statement
   29       | blocks statement

   30 statement: block
   31          | vardecl
   32          | while
   33          | ifelse
   34          | return
   35          | expr ';'
   36          | ';'

   37 vardecl: iddecl '=' expr ';'

   38 while: TOK_WHILE '(' expr ')' statement

   39 ifelse: TOK_IF '(' expr ')' statement
   40       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   41 return: TOK_RETURN ';'
   42       | TOK_RETURN expr ';'

   43 expr: allocator
   44     | call
   45     | unop
   46     | binop
   47     | '(' expr ')'
   48     | variable
   49     | constant

   50 binop: expr '=' expr
   51      | expr TOK_EQ expr
   52      | expr TOK_NE expr
   53      | expr TOK_LT expr
   54      | expr TOK_LE expr
   55      | expr TOK_GT expr
   56      | expr TOK_GE expr
   57      | expr '*' expr
   58      | expr '/' expr
   59      | expr '+' expr
   60      | expr '-' expr
   61      | expr '%' expr

   62 unop: '+' expr
   63     | '-' expr
   64     | '!' expr

   65 allocator: TOK_NEW TOK_IDENT '(' ')'
   66          | TOK_NEW TOK_STRING '(' expr ')'
   67          | TOK_NEW basetype '[' expr ']'

   68 call: TOK_IDENT '(' ')'
   69     | calls ')'

   70 calls: TOK_IDENT '(' expr
   71      | calls ',' expr

   72 variable: TOK_IDENT
   73         | expr '[' expr ']'
   74         | expr '.' TOK_IDENT

   75 constant: TOK_INTCON
   76         | TOK_CHARCON
   77         | TOK_STRINGCON
   78         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 64
'%' (37) 61
'(' (40) 18 19 20 21 38 39 40 47 65 66 68 70
')' (41) 18 19 20 21 38 39 40 47 65 66 68 69
'*' (42) 57
'+' (43) 59 62
',' (44) 23 71
'-' (45) 60 63
'.' (46) 74
'/' (47) 58
';' (59) 6 10 18 20 35 36 37 41 42
'=' (61) 37 50
'[' (91) 67 73
']' (93) 67 73
'{' (123) 8 9 26 28
'}' (125) 5 8 9 26 27
error (256) 5 6
TOK_NOTELSE (258)
TOK_IF (259) 39 40
TOK_ELSE (260) 40
TOK_LE (261) 54
TOK_LT (262) 53
TOK_GE (263) 56
TOK_GT (264) 55
TOK_NE (265) 52
TOK_EQ (266) 51
TOK_NEW (267) 65 66 67
TOK_NEG (268)
TOK_POS (269)
TOK_FUNCTION (270)
TOK_FIELD (271)
TOK_ARRAY (272) 13 25
TOK_VOID (273) 14
TOK_CHAR (274)
TOK_INT (275) 15
TOK_STRING (276) 16 66
NUMBER (277)
TOK_PROTOTYPE (278)
TOK_WHILE (279) 38
TOK_RETURN (280) 41 42
TOK_RETURNVOID (281)
TOK_STRUCT (282) 8 9
TOK_NULL (283) 78
TOK_INDEX (284)
TOK_IDENT (285) 8 9 12 13 17 24 25 65 68 70 72 74
TOK_INTCON (286) 75
TOK_CHARCON (287) 76
TOK_STRINGCON (288) 77
TOK_BLOCK (289)
TOK_CALL (290)
TOK_IFELSE (291)
TOK_DECLID (292)
TOK_NEWSTRING (293)
TOK_NEWARRAY (294)
TOK_TYPEID (295)
TOK_ORD (296)
TOK_CHR (297)
TOK_ROOT (298)
TOK_PARAMLIST (299)
TOK_VARDECL (300)


Nonterminals, with rules where they appear

$accept (62)
    on left: 0
start (63)
    on left: 1, on right: 0
program (64)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (65)
    on left: 8 9, on right: 2
fdecls (66)
    on left: 10 11, on right: 9 10
fdecl (67)
    on left: 12 13, on right: 10 11
basetype (68)
    on left: 14 15 16 17, on right: 12 13 24 25 67
function (69)
    on left: 18 19 20 21, on right: 3
paramlist (70)
    on left: 22 23, on right: 20 21 23
iddecl (71)
    on left: 24 25, on right: 18 19 20 21 22 23 37
block (72)
    on left: 26 27, on right: 19 21 30
blocks (73)
    on left: 28 29, on right: 27 29
statement (74)
    on left: 30 31 32 33 34 35 36, on right: 4 28 29 38 39 40
vardecl (75)
    on left: 37, on right: 31
while (76)
    on left: 38, on right: 32
ifelse (77)
    on left: 39 40, on right: 33
return (78)
    on left: 41 42, on right: 34
expr (79)
    on left: 43 44 45 46 47 48 49, on right: 35 37 38 39 40 42 47 50
    51 52 53 54 55 56 57 58 59 60 61 62 63 64 66 67 70 71 73 74
binop (80)
    on left: 50 51 52 53 54 55 56 57 58 59 60 61, on right: 46
unop (81)
    on left: 62 63 64, on right: 45
allocator (82)
    on left: 65 66 67, on right: 43
call (83)
    on left: 68 69, on right: 44
calls (84)
    on left: 70 71, on right: 69 71
variable (85)
    on left: 72 73 74, on right: 48
constant (86)
    on left: 75 76 77 78, on right: 49


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_IF         shift, and go to state 5
    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_INT        shift, and go to state 12
    TOK_STRING     shift, and go to state 13
    TOK_WHILE      shift, and go to state 14
    TOK_RETURN     shift, and go to state 15
    TOK_STRUCT     shift, and go to state 16
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    $end  reduce using rule 1 (start)

    structdef  go to state 24
    basetype   go to state 25
    function   go to state 26
    iddecl     go to state 27
    block      go to state 28
    blocks     go to state 29
    statement  go to state 30
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 43
    ';'  shift, and go to state 44


State 5

   39 ifelse: TOK_IF . '(' expr ')' statement
   40       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 45


State 6

   62 unop: '+' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 47
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 7

   63 unop: '-' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 48
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 8

   64 unop: '!' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 49
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 9

   65 allocator: TOK_NEW . TOK_IDENT '(' ')'
   66          | TOK_NEW . TOK_STRING '(' expr ')'
   67          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 11
    TOK_INT     shift, and go to state 12
    TOK_STRING  shift, and go to state 50
    TOK_IDENT   shift, and go to state 51

    basetype  go to state 52


State 10

   47 expr: '(' . expr ')'

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 53
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 11

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 12

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


State 13

   16 basetype: TOK_STRING .

    $default  reduce using rule 16 (basetype)


State 14

   38 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 54


State 15

   41 return: TOK_RETURN . ';'
   42       | TOK_RETURN . expr ';'

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    ';'            shift, and go to state 55

    expr       go to state 56
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 16

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    9          | TOK_STRUCT . TOK_IDENT '{' fdecls '}'

    TOK_IDENT  shift, and go to state 57


State 17

   78 constant: TOK_NULL .

    $default  reduce using rule 78 (constant)


State 18

   17 basetype: TOK_IDENT .
   68 call: TOK_IDENT . '(' ')'
   70 calls: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 58

    TOK_ARRAY  reduce using rule 17 (basetype)
    TOK_IDENT  reduce using rule 17 (basetype)
    $default   reduce using rule 72 (variable)


State 19

   75 constant: TOK_INTCON .

    $default  reduce using rule 75 (constant)


State 20

   76 constant: TOK_CHARCON .

    $default  reduce using rule 76 (constant)


State 21

   77 constant: TOK_STRINGCON .

    $default  reduce using rule 77 (constant)


State 22

   36 statement: ';' .

    $default  reduce using rule 36 (statement)


State 23

   26 block: '{' . '}'
   28 blocks: '{' . statement

    TOK_IF         shift, and go to state 5
    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_INT        shift, and go to state 12
    TOK_STRING     shift, and go to state 13
    TOK_WHILE      shift, and go to state 14
    TOK_RETURN     shift, and go to state 15
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '}'            shift, and go to state 59
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 25
    iddecl     go to state 60
    block      go to state 28
    blocks     go to state 29
    statement  go to state 61
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 24

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 25

   24 iddecl: basetype . TOK_IDENT
   25       | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 62
    TOK_IDENT  shift, and go to state 63


State 26

    3 program: program function .

    $default  reduce using rule 3 (program)


State 27

   18 function: iddecl . '(' ')' ';'
   19         | iddecl . '(' ')' block
   20         | iddecl . '(' paramlist ')' ';'
   21         | iddecl . '(' paramlist ')' block
   37 vardecl: iddecl . '=' expr ';'

    '='  shift, and go to state 64
    '('  shift, and go to state 65


State 28

   30 statement: block .

    $default  reduce using rule 30 (statement)


State 29

   27 block: blocks . '}'
   29 blocks: blocks . statement

    TOK_IF         shift, and go to state 5
    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_INT        shift, and go to state 12
    TOK_STRING     shift, and go to state 13
    TOK_WHILE      shift, and go to state 14
    TOK_RETURN     shift, and go to state 15
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '}'            shift, and go to state 66
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 25
    iddecl     go to state 60
    block      go to state 28
    blocks     go to state 29
    statement  go to state 67
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 30

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 31

   31 statement: vardecl .

    $default  reduce using rule 31 (statement)


State 32

   32 statement: while .

    $default  reduce using rule 32 (statement)


State 33

   33 statement: ifelse .

    $default  reduce using rule 33 (statement)


State 34

   34 statement: return .

    $default  reduce using rule 34 (statement)


State 35

   35 statement: expr . ';'
   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81
    ';'     shift, and go to state 82


State 36

   46 expr: binop .

    $default  reduce using rule 46 (expr)


State 37

   45 expr: unop .

    $default  reduce using rule 45 (expr)


State 38

   43 expr: allocator .

    $default  reduce using rule 43 (expr)


State 39

   44 expr: call .

    $default  reduce using rule 44 (expr)


State 40

   69 call: calls . ')'
   71 calls: calls . ',' expr

    ')'  shift, and go to state 83
    ','  shift, and go to state 84


State 41

   48 expr: variable .

    $default  reduce using rule 48 (expr)


State 42

   49 expr: constant .

    $default  reduce using rule 49 (expr)


State 43

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 44

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 45

   39 ifelse: TOK_IF '(' . expr ')' statement
   40       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 85
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 46

   68 call: TOK_IDENT . '(' ')'
   70 calls: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 58

    $default  reduce using rule 72 (variable)


State 47

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   62 unop: '+' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 62 (unop)


State 48

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   63 unop: '-' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 63 (unop)


State 49

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   64 unop: '!' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 64 (unop)


State 50

   16 basetype: TOK_STRING .
   66 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 86

    $default  reduce using rule 16 (basetype)


State 51

   17 basetype: TOK_IDENT .
   65 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 87

    $default  reduce using rule 17 (basetype)


State 52

   67 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 88


State 53

   47 expr: '(' expr . ')'
   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81
    ')'     shift, and go to state 89


State 54

   38 while: TOK_WHILE '(' . expr ')' statement

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 90
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 55

   41 return: TOK_RETURN ';' .

    $default  reduce using rule 41 (return)


State 56

   42 return: TOK_RETURN expr . ';'
   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81
    ';'     shift, and go to state 91


State 57

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    9          | TOK_STRUCT TOK_IDENT . '{' fdecls '}'

    '{'  shift, and go to state 92


State 58

   68 call: TOK_IDENT '(' . ')'
   70 calls: TOK_IDENT '(' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    ')'            shift, and go to state 93

    expr       go to state 94
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 59

   26 block: '{' '}' .

    $default  reduce using rule 26 (block)


State 60

   37 vardecl: iddecl . '=' expr ';'

    '='  shift, and go to state 64


State 61

   28 blocks: '{' statement .

    $default  reduce using rule 28 (blocks)


State 62

   25 iddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 95


State 63

   24 iddecl: basetype TOK_IDENT .

    $default  reduce using rule 24 (iddecl)


State 64

   37 vardecl: iddecl '=' . expr ';'

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 96
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 65

   18 function: iddecl '(' . ')' ';'
   19         | iddecl '(' . ')' block
   20         | iddecl '(' . paramlist ')' ';'
   21         | iddecl '(' . paramlist ')' block

    TOK_VOID    shift, and go to state 11
    TOK_INT     shift, and go to state 12
    TOK_STRING  shift, and go to state 13
    TOK_IDENT   shift, and go to state 97
    ')'         shift, and go to state 98

    basetype   go to state 25
    paramlist  go to state 99
    iddecl     go to state 100


State 66

   27 block: blocks '}' .

    $default  reduce using rule 27 (block)


State 67

   29 blocks: blocks statement .

    $default  reduce using rule 29 (blocks)


State 68

   50 binop: expr '=' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 101
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 69

   54 binop: expr TOK_LE . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 102
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 70

   53 binop: expr TOK_LT . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 103
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 71

   56 binop: expr TOK_GE . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 104
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 72

   55 binop: expr TOK_GT . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 105
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 73

   52 binop: expr TOK_NE . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 106
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 74

   51 binop: expr TOK_EQ . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 107
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 75

   59 binop: expr '+' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 108
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 76

   60 binop: expr '-' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 109
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 77

   57 binop: expr '*' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 110
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 78

   58 binop: expr '/' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 111
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 79

   61 binop: expr '%' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 112
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 80

   73 variable: expr '[' . expr ']'

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 113
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 81

   74 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 114


State 82

   35 statement: expr ';' .

    $default  reduce using rule 35 (statement)


State 83

   69 call: calls ')' .

    $default  reduce using rule 69 (call)


State 84

   71 calls: calls ',' . expr

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 115
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 85

   39 ifelse: TOK_IF '(' expr . ')' statement
   40       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81
    ')'     shift, and go to state 116


State 86

   66 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 117
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 87

   65 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 118


State 88

   67 allocator: TOK_NEW basetype '[' . expr ']'

    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21

    expr       go to state 119
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 89

   47 expr: '(' expr ')' .

    $default  reduce using rule 47 (expr)


State 90

   38 while: TOK_WHILE '(' expr . ')' statement
   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81
    ')'     shift, and go to state 120


State 91

   42 return: TOK_RETURN expr ';' .

    $default  reduce using rule 42 (return)


State 92

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
    9          | TOK_STRUCT TOK_IDENT '{' . fdecls '}'

    TOK_VOID    shift, and go to state 11
    TOK_INT     shift, and go to state 12
    TOK_STRING  shift, and go to state 13
    TOK_IDENT   shift, and go to state 97
    '}'         shift, and go to state 121

    fdecls    go to state 122
    fdecl     go to state 123
    basetype  go to state 124


State 93

   68 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 68 (call)


State 94

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   70 calls: TOK_IDENT '(' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81

    $default  reduce using rule 70 (calls)


State 95

   25 iddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 25 (iddecl)


State 96

   37 vardecl: iddecl '=' expr . ';'
   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81
    ';'     shift, and go to state 125


State 97

   17 basetype: TOK_IDENT .

    $default  reduce using rule 17 (basetype)


State 98

   18 function: iddecl '(' ')' . ';'
   19         | iddecl '(' ')' . block

    ';'  shift, and go to state 126
    '{'  shift, and go to state 23

    block   go to state 127
    blocks  go to state 29


State 99

   20 function: iddecl '(' paramlist . ')' ';'
   21         | iddecl '(' paramlist . ')' block
   23 paramlist: paramlist . ',' iddecl

    ')'  shift, and go to state 128
    ','  shift, and go to state 129


State 100

   22 paramlist: iddecl .

    $default  reduce using rule 22 (paramlist)


State 101

   50 binop: expr . '=' expr
   50      | expr '=' expr .
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81

    $default  reduce using rule 50 (binop)


State 102

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   54      | expr TOK_LE expr .
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 54 (binop)


State 103

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   53      | expr TOK_LT expr .
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 53 (binop)


State 104

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   56      | expr TOK_GE expr .
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 56 (binop)


State 105

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   55      | expr TOK_GT expr .
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 55 (binop)


State 106

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   52      | expr TOK_NE expr .
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 52 (binop)


State 107

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   51      | expr TOK_EQ expr .
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 51 (binop)


State 108

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   59      | expr '+' expr .
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 59 (binop)


State 109

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   60      | expr '-' expr .
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 60 (binop)


State 110

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   57      | expr '*' expr .
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 57 (binop)


State 111

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   58      | expr '/' expr .
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 58 (binop)


State 112

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   61      | expr '%' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 80
    '.'  shift, and go to state 81

    $default  reduce using rule 61 (binop)


State 113

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   73 variable: expr . '[' expr ']'
   73         | expr '[' expr . ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81
    ']'     shift, and go to state 130


State 114

   74 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 74 (variable)


State 115

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   71 calls: calls ',' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81

    $default  reduce using rule 71 (calls)


State 116

   39 ifelse: TOK_IF '(' expr ')' . statement
   40       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_IF         shift, and go to state 5
    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_INT        shift, and go to state 12
    TOK_STRING     shift, and go to state 13
    TOK_WHILE      shift, and go to state 14
    TOK_RETURN     shift, and go to state 15
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 25
    iddecl     go to state 60
    block      go to state 28
    blocks     go to state 29
    statement  go to state 131
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 117

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   66 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81
    ')'     shift, and go to state 132


State 118

   65 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 65 (allocator)


State 119

   50 binop: expr . '=' expr
   51      | expr . TOK_EQ expr
   52      | expr . TOK_NE expr
   53      | expr . TOK_LT expr
   54      | expr . TOK_LE expr
   55      | expr . TOK_GT expr
   56      | expr . TOK_GE expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61      | expr . '%' expr
   67 allocator: TOK_NEW basetype '[' expr . ']'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '='     shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    TOK_EQ  shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '['     shift, and go to state 80
    '.'     shift, and go to state 81
    ']'     shift, and go to state 133


State 120

   38 while: TOK_WHILE '(' expr ')' . statement

    TOK_IF         shift, and go to state 5
    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_INT        shift, and go to state 12
    TOK_STRING     shift, and go to state 13
    TOK_WHILE      shift, and go to state 14
    TOK_RETURN     shift, and go to state 15
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 25
    iddecl     go to state 60
    block      go to state 28
    blocks     go to state 29
    statement  go to state 134
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 121

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 8 (structdef)


State 122

    9 structdef: TOK_STRUCT TOK_IDENT '{' fdecls . '}'
   10 fdecls: fdecls . fdecl ';'

    TOK_VOID    shift, and go to state 11
    TOK_INT     shift, and go to state 12
    TOK_STRING  shift, and go to state 13
    TOK_IDENT   shift, and go to state 97
    '}'         shift, and go to state 135

    fdecl     go to state 136
    basetype  go to state 124


State 123

   11 fdecls: fdecl .

    $default  reduce using rule 11 (fdecls)


State 124

   12 fdecl: basetype . TOK_IDENT
   13      | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 137
    TOK_IDENT  shift, and go to state 138


State 125

   37 vardecl: iddecl '=' expr ';' .

    $default  reduce using rule 37 (vardecl)


State 126

   18 function: iddecl '(' ')' ';' .

    $default  reduce using rule 18 (function)


State 127

   19 function: iddecl '(' ')' block .

    $default  reduce using rule 19 (function)


State 128

   20 function: iddecl '(' paramlist ')' . ';'
   21         | iddecl '(' paramlist ')' . block

    ';'  shift, and go to state 139
    '{'  shift, and go to state 23

    block   go to state 140
    blocks  go to state 29


State 129

   23 paramlist: paramlist ',' . iddecl

    TOK_VOID    shift, and go to state 11
    TOK_INT     shift, and go to state 12
    TOK_STRING  shift, and go to state 13
    TOK_IDENT   shift, and go to state 97

    basetype  go to state 25
    iddecl    go to state 141


State 130

   73 variable: expr '[' expr ']' .

    $default  reduce using rule 73 (variable)


State 131

   39 ifelse: TOK_IF '(' expr ')' statement .
   40       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 142

    $default  reduce using rule 39 (ifelse)


State 132

   66 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 66 (allocator)


State 133

   67 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 67 (allocator)


State 134

   38 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 38 (while)


State 135

    9 structdef: TOK_STRUCT TOK_IDENT '{' fdecls '}' .

    $default  reduce using rule 9 (structdef)


State 136

   10 fdecls: fdecls fdecl . ';'

    ';'  shift, and go to state 143


State 137

   13 fdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 144


State 138

   12 fdecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fdecl)


State 139

   20 function: iddecl '(' paramlist ')' ';' .

    $default  reduce using rule 20 (function)


State 140

   21 function: iddecl '(' paramlist ')' block .

    $default  reduce using rule 21 (function)


State 141

   23 paramlist: paramlist ',' iddecl .

    $default  reduce using rule 23 (paramlist)


State 142

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_IF         shift, and go to state 5
    '+'            shift, and go to state 6
    '-'            shift, and go to state 7
    '!'            shift, and go to state 8
    TOK_NEW        shift, and go to state 9
    '('            shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_INT        shift, and go to state 12
    TOK_STRING     shift, and go to state 13
    TOK_WHILE      shift, and go to state 14
    TOK_RETURN     shift, and go to state 15
    TOK_NULL       shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23

    basetype   go to state 25
    iddecl     go to state 60
    block      go to state 28
    blocks     go to state 29
    statement  go to state 145
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    binop      go to state 36
    unop       go to state 37
    allocator  go to state 38
    call       go to state 39
    calls      go to state 40
    variable   go to state 41
    constant   go to state 42


State 143

   10 fdecls: fdecls fdecl ';' .

    $default  reduce using rule 10 (fdecls)


State 144

   13 fdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 13 (fdecl)


State 145

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 40 (ifelse)
